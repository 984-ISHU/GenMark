import { useLocation, useNavigate } from "react-router-dom";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Mail, ChevronLeft, ChevronRight } from "lucide-react";
import { useEffect, useState, useRef } from "react";
import {
  getSpecificProject,
  getGeneratedOutput,
  getGeneratedImageURL,
} from "@/lib/api";

const emailTemplates = [
  {
    id: "template1",
    name: "Modern Newsletter",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f4f4f4;">
        <h1 style="color: #333; text-align: center;">{projectName}</h1>
        <img src="{imageURL}" alt="Generated Image" style="max-width: 100%; height: auto; margin: 20px 0;" />
        <div style="background-color: white; padding: 20px; border-radius: 8px;">
          <p style="color: #333; line-height: 1.6;">{textOutput}</p>
        </div>
        <p style="text-align: center; color: #666; margin-top: 20px;">Generated by GenMark</p>
      </div>
    `
  },
  {
    id: "template2",
    name: "Minimalist",
    html: `
      <div style="font-family: Helvetica, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2c3e50;">{projectName}</h2>
        <img src="{imageURL}" alt="Generated Image" style="width: 100%; margin: 10px 0;" />
        <p style="color: #34495e; font-size: 16px;">{textOutput}</p>
        <hr style="border-top: 1px solid #eee; margin: 20px 0;">
        <p style="color: #7f8c8d; font-size: 12px; text-align: center;">Powered by GenMark</p>
      </div>
    `
  },
  {
    id: "template3",
    name: "Bold Marketing",
    html: `
      <div style="font-family: Verdana, sans-serif; max-width: 600px; margin: 0 auto; padding: 30px; background-color: #1e90ff; color: white;">
        <h1 style="text-align: center; font-size: 28px; text-transform: uppercase;">{projectName}</h1>
        <img src="{imageURL}" alt="Generated Image" style="width: 100%; border-radius: 10px; margin: 20px 0;" />
        <div style="background-color: rgba(255,255,255,0.9); color: #333; padding: 20px; border-radius: 10px;">
          <p style="font-size: 16px; line-height: 1.5;">{textOutput}</p>
        </div>
        <p style="text-align: center; margin-top: 20px; font-size: 14px;">Created with GenMark</p>
      </div>
    `
  }
];

const Automation = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const state = location.state;

  const [textOutput, setTextOutput] = useState("");
  const [imageURL, setImageURL] = useState("");
  const [textLoading, setTextLoading] = useState(true);
  const [imageLoading, setImageLoading] = useState(true);
  const [isSending, setIsSending] = useState(false);
  const [currentTemplateIndex, setCurrentTemplateIndex] = useState(0);

  const textLoadingRef = useRef(true);
  const imageLoadingRef = useRef(true);

  useEffect(() => {
    if (!state) {
      navigate("/dashboard");
      return;
    }

    const pollInterval = 2000;
    const timeoutDuration = 30000;
    const startTime = Date.now();

    const poll = async () => {
      try {
        const projectRes = await getSpecificProject(
          state.user_id,
          state.project_id
        );
        const generated_outputs_id = projectRes.data.generated_outputs_id;
        if (!generated_outputs_id) return;

        const outputRes = await getGeneratedOutput(generated_outputs_id);
        const { text, image } = outputRes.data;

        if (text && !textOutput) {
          setTextOutput(text);
          setTextLoading(false);
          textLoadingRef.current = false;
        }

        if (image && !imageURL) {
          setImageURL(getGeneratedImageURL(image));
          setImageLoading(false);
          imageLoadingRef.current = false;
        }

        if (
          (textLoadingRef.current || imageLoadingRef.current) &&
          Date.now() - startTime < timeoutDuration
        ) {
          setTimeout(poll, pollInterval);
        }
      } catch (err) {
        console.error("Polling error:", err);
        setTextLoading(false);
        setImageLoading(false);
        textLoadingRef.current = false;
        imageLoadingRef.current = false;
      }
    };

    poll();
  }, [state, navigate, textOutput, imageURL]);

  useEffect(() => {
    if (imageURL) {
      console.log("Generated Image URL:", imageURL);
    }
  }, [imageURL]);

  const handleSendEmail = async () => {
    setIsSending(true);
    try {
      const template = emailTemplates[currentTemplateIndex];
      const html = template.html
        .replace("{projectName}", state.projectName)
        .replace("{imageURL}", imageURL)
        .replace("{textOutput}", textOutput);
      
      console.log(html)
      const response = await fetch('http://localhost:8000/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          subject: `GenMark: ${state.projectName}`,
          html_body: html,
          recipients: []
        })
      });

      if (!response.ok) {
        throw new Error('Failed to send email');
      }
      alert('Email sent successfully!');
    } catch (error) {
      console.error('Email sending error:', error);
      alert('Failed to send email');
    } finally {
      setIsSending(false);
    }
  };

  const handlePreviousTemplate = () => {
    setCurrentTemplateIndex((prev) => 
      prev === 0 ? emailTemplates.length - 1 : prev - 1
    );
  };

  const handleNextTemplate = () => {
    setCurrentTemplateIndex((prev) => 
      prev === emailTemplates.length - 1 ? 0 : prev + 1
    );
  };

  if (!state) return null;

  const name = state.name;
  const projectName = state.projectName;

  return (
    <div className="min-h-screen w-screen bg-gradient-to-br from-purple-200 via-pink-100 to-indigo-100 font-sans p-6 overflow-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-10">
        <div>
          <h1 className="text-4xl font-extrabold text-purple-700 tracking-tight">
            GenMark
          </h1>
          <p className="text-purple-600 font-medium mt-2">
            Project: {projectName}
          </p>
        </div>
        <div className="flex gap-4">
          <button
            className="bg-gradient-to-r from-purple-600 to-fuchsia-600 text-white font-semibold py-2 px-6 rounded-3xl shadow-md hover:from-purple-700 hover:to-fuchsia-700 transition-all duration-200 flex items-center gap-2"
            onClick={() => navigate("/dashboard")}
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Dashboard
          </button>
          <button
            className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold py-2 px-6 rounded-3xl shadow-md hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 flex items-center gap-2"
            onClick={() => navigate("/preview", { state })}
            > 
            Back to Preview
          </button>
        </div>
      </div>

      {/* Greeting */}
      <div className="mb-10 text-center">
        <h2 className="text-3xl font-semibold text-gray-800">
          ðŸŽ‰ Hey {name}, automate your email campaign for{" "}
          <span className="text-purple-700 font-bold">{projectName}</span>!
        </h2>
        <p className="text-gray-600 mt-2">
          Preview and send your AI-generated marketing emails below.
        </p>
      </div>

      {/* Email Preview Section */}
      <div className="mb-12 px-10">
        <div className="relative flex items-center justify-center">
          <Button
            onClick={handlePreviousTemplate}
            className="bg-purple-600 text-white hover:bg-purple-700 rounded-full p-2 absolute left-4 z-10"
          >
            <ChevronLeft className="w-6 h-6" />
          </Button>
          <div className="flex items-center justify-center w-full max-w-4xl relative">
            {emailTemplates.map((template, index) => {
              const isCurrent = index === currentTemplateIndex;
              const isLeft = index === (currentTemplateIndex - 1 + emailTemplates.length) % emailTemplates.length;
              const isRight = index === (currentTemplateIndex + 1) % emailTemplates.length;
              
              if (!isCurrent && !isLeft && !isRight) return null;

              const html = textOutput && imageURL && !textLoading && !imageLoading
                ? template.html
                    .replace("{projectName}", state.projectName)
                    .replace("{imageURL}", imageURL)
                    .replace("{textOutput}", textOutput)
                : null;

              return (
                <div
                  key={template.id}
                  className={`transition-all duration-300 ${
                    isCurrent
                      ? 'w-full max-w-2xl opacity-100 z-10'
                      : isLeft
                      ? 'w-full max-w-2xl opacity-50 blur-sm absolute left-0 -translate-x-2/3'
                      : 'w-full max-w-2xl opacity-50 blur-sm absolute right-0 translate-x-2/3'
                  }`}
                  style={{ filter: isCurrent ? 'none' : 'blur(4px)' }}
                >
                  <Card className="bg-white/90 border border-purple-300 shadow-lg rounded-2xl">
                    <CardHeader>
                      <CardTitle className="text-lg font-bold text-purple-700 flex items-center gap-2">
                        <Mail className="w-5 h-5" />
                        {template.name}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4">
                      {html ? (
                        <div
                          className="border border-purple-100 rounded-lg"
                          dangerouslySetInnerHTML={{ __html: html }}
                        />
                      ) : (
                        <div className="text-center py-20">
                          <Mail className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                          <p className="text-gray-500 italic">Waiting for content...</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              );
            })}
          </div>
          <Button
            onClick={handleNextTemplate}
            className="bg-purple-600 text-white hover:bg-purple-700 rounded-full p-2 absolute right-4 z-10"
          >
            <ChevronRight className="w-6 h-6" />
          </Button>
        </div>
      </div>

      {/* Send Email Button */}
      <div className="flex justify-center mt-8">
        <Button
          onClick={handleSendEmail}
          disabled={isSending || textLoading || imageLoading || !textOutput || !imageURL}
          className="bg-gradient-to-r from-indigo-600 to-blue-600 text-white font-semibold py-3 px-8 rounded-3xl shadow-md hover:from-indigo-700 hover:to-blue-700 transition-all duration-200 flex items-center gap-2 disabled:opacity-50"
        >
          <Mail className="w-5 h-5" />
          {isSending ? 'Sending...' : 'Send Email'}
        </Button>
      </div>
    </div>
  );
};

export default Automation;