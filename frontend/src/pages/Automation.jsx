import { useLocation, useNavigate } from "react-router-dom";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Mail, ChevronLeft, ChevronRight } from "lucide-react";
import { useEffect, useState, useRef } from "react";
import {
  getSpecificProject,
  getGeneratedOutput,
  getGeneratedImageURL,
  checkFilteredDatasetExists,
  getFilteredDataset,
} from "@/lib/api";

const emailTemplates = [
  {
    id: "template1",
    name: "Modern Newsletter",
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f4f4f4;">
        <h1 style="color: #333; text-align: center;">{projectName}</h1>
        <img src="{imageURL}" alt="Generated Image" style="max-width: 100%; height: auto; margin: 20px 0;" />
        <div style="background-color: white; padding: 20px; border-radius: 8px;">
          <p style="color: #333; line-height: 1.6;">{textOutput}</p>
        </div>
        <p style="text-align: center; color: #666; margin-top: 20px;">Generated by GenMark</p>
      </div>
    `,
  },
  {
    id: "template2",
    name: "Minimalist",
    html: `
      <div style="font-family: Helvetica, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2c3e50;">{projectName}</h2>
        <img src="{imageURL}" alt="Generated Image" style="width: 100%; margin: 10px 0;" />
        <p style="color: #34495e; font-size: 16px;">{textOutput}</p>
        <hr style="border-top: 1px solid #eee; margin: 20px 0;">
        <p style="color: #7f8c8d; font-size: 12px; text-align: center;">Powered by GenMark</p>
      </div>
    `,
  },
  {
    id: "template3",
    name: "Bold Marketing",
    html: `
      <div style="font-family: Verdana, sans-serif; max-width: 600px; margin: 0 auto; padding: 30px; background-color: #1e90ff; color: white;">
        <h1 style="text-align: center; font-size: 28px; text-transform: uppercase;">{projectName}</h1>
        <img src="{imageURL}" alt="Generated Image" style="width: 100%; border-radius: 10px; margin: 20px 0;" />
        <div style="background-color: rgba(255,255,255,0.9); color: #333; padding: 20px; border-radius: 10px;">
          <p style="font-size: 16px; line-height: 1.5c;">{textOutput}</p>
        </div>
        <p style="text-align: center; margin-top: 20px; font-size: 14px;">Created with GenMark</p>
      </div>
    `,
  },
];

const Automation = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const state = location.state;

  const [textOutput, setTextOutput] = useState("");
  const [imageURL, setImageURL] = useState("");
  const [textLoading, setTextLoading] = useState(true);
  const [imageLoading, setImageLoading] = useState(true);
  const [isSending, setIsSending] = useState(false);
  const [currentTemplateIndex, setCurrentTemplateIndex] = useState(0);
  const [datasetHead, setDatasetHead] = useState([]);
  const [isDatasetLoading, setIsDatasetLoading] = useState(true);

  const textLoadingRef = useRef(true);
  const imageLoadingRef = useRef(true);

  useEffect(() => {
    if (!state) {
      navigate("/dashboard");
      return;
    }

    const fetchFilteredDataset = async () => {
      try {
        const checkRes = await checkFilteredDatasetExists(
          state.user_id,
          state.project_id
        );

        if (!checkRes.data.exists) {
          // Wait for filtering to complete
          console.log("Found no filtered data");
        }

        // Now fetch filtered data
        const res = await getFilteredDataset(state.user_id, state.project_id);
        const data = await res.data;
        setDatasetHead(data);
      } catch (err) {
        console.error("Error fetching filtered dataset:", err);
      } finally {
        setIsDatasetLoading(false);
      }
    };

    const pollOutput = async () => {
      try {
        const projectRes = await getSpecificProject(
          state.user_id,
          state.project_id
        );
        const outputId = projectRes.data.generated_outputs_id;
        if (!outputId) return;

        const outputRes = await getGeneratedOutput(outputId);
        const { text, image } = outputRes.data;

        if (text && !textOutput) {
          setTextOutput(text);
          setTextLoading(false);
          textLoadingRef.current = false;
        }

        if (image && !imageURL) {
          setImageURL(getGeneratedImageURL(image));
          setImageLoading(false);
          imageLoadingRef.current = false;
        }

        if (textLoadingRef.current || imageLoadingRef.current) {
          setTimeout(pollOutput, 2000);
        }
      } catch (err) {
        console.error("Polling error:", err);
        setTextLoading(false);
        setImageLoading(false);
        textLoadingRef.current = false;
        imageLoadingRef.current = false;
      }
    };

    fetchFilteredDataset();
    pollOutput();
  }, [state, navigate, textOutput, imageURL]);

  const handleSendEmail = async () => {
    setIsSending(true);
    try {
      const template = emailTemplates[currentTemplateIndex];
      const html = template.html
        .replace("{projectName}", state.projectName)
        .replace("{imageURL}", imageURL)
        .replace("{textOutput}", textOutput);

      console.log(html);
      const response = await fetch("http://127.0.0.1:8000/api/send-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          subject: `GenMark: ${state.projectName}`,
          html_body: html,
          recipients: ["ishux984@gmail.com", "karanjadhav2003@gmail.com"],
        }),
      });
 
      if (!response.ok) {
        throw new Error("Failed to send email");
      }
      alert("Email sent successfully!");
    } catch (error) {
      console.error("Email sending error:", error);
      alert("Failed to send email");
    } finally {
      setIsSending(false);
    } 
  };

  const handlePreviousTemplate = () => {
    setCurrentTemplateIndex((prev) =>
      prev === 0 ? emailTemplates.length - 1 : prev - 1
    );
  };

  const handleNextTemplate = () => {
    setCurrentTemplateIndex((prev) =>
      prev === emailTemplates.length - 1 ? 0 : prev + 1
    );
  };

  if (!state) return null;

  const name = state.name;
  const projectName = state.projectName;

  return (
    <div className="min-h-screen w-screen bg-gradient-to-br from-purple-200 via-pink-100 to-indigo-100 font-sans p-6 overflow-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-10">
        <div>
          <h1 className="text-4xl font-extrabold text-purple-700 tracking-tight">
            GenMark
          </h1>
          <p className="text-purple-600 font-medium mt-2">
            Project: {projectName}
          </p>
        </div>
        <div className="flex gap-4">
          <button
            className="bg-gradient-to-r from-purple-600 to-fuchsia-600 text-white font-semibold py-2 px-6 rounded-3xl shadow-md hover:from-purple-700 hover:to-fuchsia-700 transition-all duration-200 flex items-center gap-2"
            onClick={() => navigate("/dashboard")}
          >
            <ArrowLeft className="w-4 h-4" />
            Back to Dashboard
          </button>
          <button
            className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-semibold py-2 px-6 rounded-3xl shadow-md hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 flex items-center gap-2"
            onClick={() => navigate("/preview", { state })}
          >
            Back to Preview
          </button>
        </div>
      </div>

      {/* Greeting */}
      <div className="mb-10 text-center">
        <h2 className="text-3xl font-semibold text-gray-800">
          ðŸŽ‰ Hey {name}, automate your email campaign for{" "}
          <span className="text-purple-700 font-bold">{projectName}</span>!
        </h2>
        <p className="text-gray-600 mt-2">
          Preview and send your AI-generated marketing emails below.
        </p>
      </div>

      {/* Email Preview Section */}
      <div className="mb-12 px-10 scale-75">
        <div className="relative flex items-center justify-center">
          <Button
            onClick={handlePreviousTemplate}
            className="bg-purple-600 text-white hover:bg-purple-700 rounded-full p-2 absolute left-4 z-10"
          >
            <ChevronLeft className="w-6 h-6" />
          </Button>
          <div className="flex items-center justify-center w-full max-w-4xl relative">
            {emailTemplates.map((template, index) => {
              const isCurrent = index === currentTemplateIndex;
              const isLeft =
                index ===
                (currentTemplateIndex - 1 + emailTemplates.length) %
                  emailTemplates.length;
              const isRight =
                index === (currentTemplateIndex + 1) % emailTemplates.length;

              if (!isCurrent && !isLeft && !isRight) return null;

              const html =
                textOutput && imageURL && !textLoading && !imageLoading
                  ? template.html
                      .replace("{projectName}", state.projectName)
                      .replace("{imageURL}", imageURL)
                      .replace("{textOutput}", textOutput)
                  : null;

              return (
                <div
                  key={template.id}
                  className={`transition-all duration-300 ${
                    isCurrent
                      ? "w-full max-w-2xl opacity-100 z-10"
                      : isLeft
                      ? "w-full max-w-2xl opacity-50 blur-sm absolute left-0 -translate-x-2/3"
                      : "w-full max-w-2xl opacity-50 blur-sm absolute right-0 translate-x-2/3"
                  }`}
                  style={{ filter: isCurrent ? "none" : "blur(4px)" }}
                >
                  <Card className="bg-white/90 border border-purple-300 shadow-lg rounded-2xl">
                    <CardHeader>
                      <CardTitle className="text-lg font-bold text-purple-700 flex items-center gap-2">
                        <Mail className="w-5 h-5" />
                        {template.name}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="p-4">
                      {html ? (
                        <div
                          className="border border-purple-100 rounded-lg"
                          dangerouslySetInnerHTML={{ __html: html }}
                        />
                      ) : (
                        <div className="text-center py-20">
                          <Mail className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                          <p className="text-gray-500 italic">
                            Waiting for content...
                          </p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              );
            })}
          </div>
          <Button
            onClick={handleNextTemplate}
            className="bg-purple-600 text-white hover:bg-purple-700 rounded-full p-2 absolute right-4 z-10"
          >
            <ChevronRight className="w-6 h-6" />
          </Button>
        </div>
      </div>
      {!isDatasetLoading && datasetHead.length > 0 && (
        <div className="bg-white p-6 rounded-xl shadow-md max-w-4xl mx-auto mb-10">
          <h3 className="text-xl font-semibold text-purple-700 mb-4">
            Preview & Edit Dataset
          </h3>
          <div className="overflow-x-auto">
            <table className="table-auto w-full border border-gray-300 rounded-lg">
              <thead className="bg-purple-100">
                <tr>
                  {Object.keys(datasetHead[0]).map((col) => (
                    <th
                      key={col}
                      className="px-4 py-2 text-left text-sm font-semibold text-gray-700"
                    >
                      {col}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {datasetHead.map((row, rowIndex) => (
                  <tr key={rowIndex} className="border-b">
                    {Object.entries(row).map(([key, value], colIndex) => (
                      <td
                        key={colIndex}
                        className={`px-4 py-2 align-top ${
                          key === "Email"
                            ? "w-[600px] max-w-[800px]"
                            : "break-words"
                        }`}
                      >
                        {key === "Email" ? (
                          <input
                            type="text"
                            value={value}
                            onChange={(e) => {
                              const updated = [...datasetHead];
                              updated[rowIndex][key] = e.target.value;
                              setDatasetHead(updated);
                            }}
                            className="w-full font-mono text-sm px-3 py-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white text-gray-800"
                            style={{ minWidth: "300px" }}
                          />
                        ) : (
                          value
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          <div className="flex justify-end mt-4">
            <Button
              className="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded"
              onClick={async () => {
                try {
                  const response = await fetch(
                    "http://127.0.0.1:8000/api/datasets/save-filtered-head",
                    {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({
                        user_id: state.user_id,
                        project_id: state.project_id,
                        rows: datasetHead,
                      }),
                    }
                  );
                  if (!response.ok) throw new Error("Failed to save updates");
                  alert("Dataset head saved successfully!");
                } catch (err) {
                  console.error(err);
                  alert("Failed to save dataset.");
                }
              }}
            >
              Save Changes
            </Button>
          </div>
        </div>
      )}

      {/* Send Email Button */}
      <div className="flex justify-center mt-8">
        <Button
          onClick={handleSendEmail}
          disabled={
            isSending || textLoading || imageLoading || !textOutput || !imageURL
          }
          className="bg-gradient-to-r from-indigo-600 to-blue-600 text-white font-semibold py-3 px-8 rounded-3xl shadow-md hover:from-indigo-700 hover:to-blue-700 transition-all duration-200 flex items-center gap-2 disabled:opacity-50"
        >
          <Mail className="w-5 h-5" />
          {isSending ? "Sending..." : "Send Email"}
        </Button>
      </div>
    </div>
  );
};

export default Automation;
